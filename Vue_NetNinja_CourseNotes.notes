`----------------------------------------------------`
1. List One 
2. List Two 
`----------------------------------------------------`
--> ----> 
==> ===> ====>
`----------------------------------------------------`
[javascript]
function() {
    console.log("Hellow World!");
}
[end]

function(){
        console.log("Hellow World!");
}

`----------------------------------------------------`
`Take Note` #Highlight# "Emphasis" * Important * !Remember! 
//Comment
[Square] (Other) {Brackets}
`----------------------------------------------------`
http://www.google.com
`----------------------------------------------------`

`----------------------------------------------------`
`----- KEY LESSONS * KEY LESSONS * KEY LESSONS ------`
`----------------------------------------------------`
!1 - Data binding to attributes! Any HTML attribute (class, href, id, anything) should be passed by databining (using :ATTRIBUTE="binding", shortcut for v-bind:ATTRIBUTE="value")
*Reason* This attributes expect an string, and it is taking the value {{abc}} as the string itself!

!v-model! v-model is equal to v-value and emmit input event
*These two elements are equivalent*
    <input type="text" :value="nameURL"@input="nameURL = $event.target.value"/>
    <input type="text" v-model="nameURL"/>

!events!
    *Double Click* v-on:dblclick
    *On hover* v-on:mousemove

!test data!
    *external* https://jsonplaceholder.typicode.com
    *internal* json-server

!axios!
    npm install axios --save
    import axios from './axios'
    axios.get(url).then().catch

!filters!
    // MayusculasFilter.js
    import Vue from 'vue';

    Vue.filter('mayusculas', (value, param_1) => {
    return value.toUpperCase();
    });
    // main.js
    import './MayusculasFilter.js';

    // Component
    <template>
    ...
    {{ text | mayusculas(3)}}
    ...</template>

!v-html!
    To display a variable as HTML, and this will allow to make changes as if it were HTML:
      return text.replace(this.searchText, `<b>${this.searchText}</b>`);
!Search in string!
    .match
    .includes

!Routes!
    <router-link to="/">Home</router-link>|
      <router-link :to="{name:'home'}">Home</router-link>|
    // route.js
    {
      path: "/profile/:user_id",
      name: "profile",
      component: Profile
    },
    // Profile.vue
    user_id: this.$route.params.user_id

`----------------------------------------------------`

#SECTION 1.1: FIRST BASIC APPLICATION#