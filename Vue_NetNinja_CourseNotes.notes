`----------------------------------------------------`
1. List One 
2. List Two 
`----------------------------------------------------`
--> ----> 
==> ===> ====>
`----------------------------------------------------`
[javascript]
function() {
    console.log("Hellow World!");
}
[end]

function(){
        console.log("Hellow World!");
}

`----------------------------------------------------`
`Take Note` #Highlight# "Emphasis" * Important * !Remember! 
//Comment
[Square] (Other) {Brackets}
`----------------------------------------------------`
http://www.google.com
`----------------------------------------------------`

`----------------------------------------------------`
`----- KEY LESSONS * KEY LESSONS * KEY LESSONS ------`
`----------------------------------------------------`
!1 - Data binding to attributes! Any HTML attribute (class, href, id, anything) should be passed by databining (using :ATTRIBUTE="binding", shortcut for v-bind:ATTRIBUTE="value")
*Reason* This attributes expect an string, and it is taking the value {{abc}} as the string itself!

!v-model! v-model is equal to v-value and emmit input event
*These two elements are equivalent*
    <input type="text" :value="nameURL"@input="nameURL = $event.target.value"/>
    <input type="text" v-model="nameURL"/>

!events!
    *Double Click* v-on:dblclick
    *On hover* v-on:mousemove

!test data!
    *external* https://jsonplaceholder.typicode.com
    *internal* json-server

!axios!
    npm install axios --save
    import axios from './axios'
    axios.get(url).then().catch

!filters!
    // MayusculasFilter.js
    import Vue from 'vue';

    Vue.filter('mayusculas', (value, param_1) => {
    return value.toUpperCase();
    });
    // main.js
    import './MayusculasFilter.js';

    // Component
    <template>
    ...
    {{ text | mayusculas(3)}}
    ...</template>

!v-html!
    To display a variable as HTML, and this will allow to make changes as if it were HTML:
      return text.replace(this.searchText, `<b>${this.searchText}</b>`);
!Search in string!
    .match
    .includes

!Routes!
    <router-link to="/">Home</router-link>|
      <router-link :to="{name:'home'}">Home</router-link>|
    // route.js
    {
      path: "/profile/:user_id",
      name: "profile",
      component: Profile
    },
    // Profile.vue
    user_id: this.$route.params.user_id

    // Name route
    <router-link :to="{name:'profile', params: {user_id:user}}">{{user}}</router-link>
    // Redirect, go forward, go backword
        *Redirect*    this.$router.push({ name: "home" });
        *Backword in history* this.$router.go(-1);
        *Forward in history* this.$router.go(1);

    // To remove the # from the URL
        export default new Router({
            mode: "history",

    // Styling
        The links created with router-link add classes that can be customize to indicate if we are in the same page as the link
!watch!
    Use watch object in vue to monitor things, like changes in $route
`----------------------------------------------------`

!submit!
    Add the event to submit in the form tag, rather than the button itself
    <form @submit.prevent='whatToDoOnSubmit'>

!binding to an array index!
    It is possible to bind an input (or any object) to array[index]. So, the model is bound to the position exactly of the array and can be modified.

!slugify!
    used to create slugs (nice urls shortcuts)

!Vue CLI 3 Special Features! 
    // Instant Prototyping!
        1) Install: npm install -g @vue/cli-service-global
        2) If you need sass: npm i -D sass-loader node-sass (for sass support)
        3) Test the component: vue serve online.vue
    
    // Build Web Components
        We can build:
            App
            Library
            Web Component: Stand Alone component!
        1) Install: npm install -g @vue/cli-service-global
        2) vue build file.vue --target wc  --name online-status
            -> wc for wecompnent
            -> 
    

    // Vue UI

    // Plugin
        Plugins can modify files. However, the newly installed dependencies can't modify files
        If you add the plugin Vuetify, some of the exiting Vue files will be modified with sample code
        Add them by:
            vue add vuetify
            vue add babel
            vue add eslint

    npm run lint: To run lint and auto-fix

#SECTION 1.1: FIRST BASIC APPLICATION#

